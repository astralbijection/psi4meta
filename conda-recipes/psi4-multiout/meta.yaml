{% set data = load_setup_py_data(setup_file='conda/_conda_vers.py') %}

package:
    name: psi4-multiout
    version: {{ data.get('version') }}

source:
    git_url: git@github.com:psi4/psi4.git      # [linux]
    git_url: https://github.com/psi4/psi4.git  # [osx]
    # git_tag: v1.3.2  # explicit tag when you don't want tag.dev1  # v1.2 L1: AVX-512  # v1.2.1 L1: am8 c. v1.3  # v1.3 L1/M1: qcel max 0.5
    git_tag: master

build:
    number: 0                                  # [linux]
    number: 0                                  # [osx]
    binary_relocation: true
    skip: true                                 # [win]

requirements:
    build:
        - cmake >=3.8
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}      # [osx]
        - llvm-openmp                    # [osx]
    host:
        - mkl-devel {{ mkl }}            # [blas_impl == 'mkl']
        - openblas-devel {{ openblas }}  # [blas_impl == 'openblas']
        - pybind11 {{ pybind11 }}
        - python {{ python }}
        # qc
        - ambit {{ ambit }}
        - chemps2 {{ chemps2 }}
        - dkh {{ dkh }}
        - gau2grid {{ gau2grid }}
        - gdma {{ gdma }}
        - libint {{ libint }} {{ libint_bld }}
        - pcmsolver {{ pcmsolver }}
        - simint {{ simint }}
        - libxc {{ libxc }}
        # rt for ctest
        - networkx
        - numpy
        - qcelemental {{ qcelemental }}
        - qcengine {{ qcengine }}

outputs:
    - name: psi4
      build:
          requires_features:
              blas: {{ blas_impl }}
          run_exports:
              - {{ pin_subpackage('psi4', max_pin='x.x') }}
      requirements:
          build:
              - cmake >=3.8
              - {{ compiler('c') }}
              - {{ compiler('cxx') }}
              - {{ compiler('fortran') }}      # [osx]
              - llvm-openmp                    # [osx]
          host:
              - mkl-devel {{ mkl }}            # [blas_impl == 'mkl']
              - openblas-devel {{ openblas }}  # [blas_impl == 'openblas']
              - pybind11 {{ pybind11 }}
              - python {{ python }}
              # qc
              - ambit {{ ambit }}
              - chemps2 {{ chemps2 }}
              - dkh {{ dkh }}
              - gau2grid {{ gau2grid }}
              - gdma {{ gdma }}
              - libint {{ libint }} {{ libint_bld }}
              - pcmsolver {{ pcmsolver }}
              - qcelemental {{ qcelemental }}
              - qcengine {{ qcengine }}
              - simint {{ simint }}
              - libxc {{ libxc }}
          run:
              - intel-openmp
              - networkx
              - numpy
              - pytest                                         # drive psi4 --test
              - {{ pin_compatible('python', max_pin='x.x') }}
              - {{ pin_compatible('qcelemental', max_pin='x') }}
              - {{ pin_compatible('qcengine', max_pin='x') }}
      files:
          - bin/psi4
          - include/psi4
          - lib{{ PYMOD_INSTALL_LIBDIR }}/psi4
          - share/cmake/psi4
          - share/cmake/Target*/*
          - share/psi4
          # efpfrag
      test:
          imports:
              - psi4
          requires:
              - pytest-xdist
          commands:
              - export PYLIB_EXT=`$PYTHON -c 'import sysconfig as s; print(s.get_config_var("EXT_SUFFIX"))'`
              # Verify existence and execution
              - test -f $PREFIX/bin/psi4
              - test -f $SP_DIR/psi4/core$PYLIB_EXT
              - $PREFIX/bin/psi4 --version
              # Inspect linkage
              - ldd -r -u $SP_DIR/psi4/core$PYLIB_EXT  # [linux]
              - ldd -v $SP_DIR/psi4/core$PYLIB_EXT     # [linux]
              - otool -L $SP_DIR/psi4/core$PYLIB_EXT   # [osx]
              - conda inspect linkages --show-files --groupby=dependency ambit chemps2 dkh gau2grid gdma libint pcmsolver simint libxc psi4  # erd
              - conda inspect objects -p $PREFIX $PKG_NAME  # [osx]
              - grep -r theoryfs2 $PREFIX/share/cmake/ || true  # [linux]
              # Actually test
              - conda list
              - PASSFAIL="--passfail"           # [linux]
              - PASSFAIL=""                     # [osx]  # Mac threading occasionally bizarre
              - python $PREFIX/share/psi4/scripts/test_threading.py --passfail --ldd  # [py3k]
              - python $PREFIX/share/psi4/scripts/test_threading.py ${PASSFAIL} --psiapi -n6  # [py3k]
              - python $PREFIX/share/psi4/scripts/test_threading.py ${PASSFAIL} --psithon -n6  # [py3k and not osx]
              - python -c "import psi4, sys, os; sys.exit(psi4.test('long', extras=['--durations=50', '-n', os.environ.get('CPU_COUNT')]))"  # [linux]
              - python -c "import psi4, sys, os; sys.exit(psi4.test('quick', extras=['--durations=50', '-n', '1']))"  # [osx]
                # works but tries to test qcdb too  - pytest -rws -v --durations=0 -n ${CPU_COUNT} -m quick --pyargs psi4
              - python -c "import psi4; print('*** Psi4 {} built successfully. Buy psinet a beer!'.format(psi4.__version__))"
      about:
          home: http://psicode.org
          dev_url: https://github.com/psi4/psi4
          doc_url: http://psicode.org/psi4manual/master/index.html
          doc_source_url: https://github.com/psi4/psi4/tree/master/doc/sphinxman/source
          license: LGPL-3.0
          license_url: https://opensource.org/licenses/LGPL-3.0
          license_file: COPYING.LESSER
          license_family: LGPL
          summary: "Open-Source Quantum Chemistry - an electronic structure package in C++ driven by Python"
          description: >
            Psi4 is an open-source suite of ab initio quantum chemistry programs designed for efficient, high-accuracy simulations of a variety of molecular properties. We can routinely perform computations with more than 2500 basis functions running serially or on multi-core machines.

            With computationally demanding portions written in C++, Pybind11 exports many of the C++ classes into Python, and a flexible Python driver, Psi4 strives to be friendly to both users and developers.


# NOTES
# -----
# * to conda build package from local source rather than github, substitute like below
#   package/version: 0.1.6
#   source/path: ../../../hrw-conda
#   build/number: 1
#   build/string: abc
# * tried adding pybind11 to psi4 pkg run_exports since psi4Config needs it so
#   see if allows only host:psi4 for plugins. FAIL
# * - icc_rt {{ mkl }}  # from jupyworks

# * to test on maintenance branch
#   package/version: v1.3.1rc1  # explicit version for trial builds on maintenance branch (where versioner undefines un-tagged version)
#   source/git_tag: 1.3.x

# * define slight compatible range
#   - {{ pin_compatible('qcelemental', upper_bound='0.6') }}
#   - {{ pin_compatible('qcengine', upper_bound='0.8') }}
